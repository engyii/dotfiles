#!/usr/bin/env zsh
# .zshrc - Zsh configuration file

# Path setup
export PATH="$HOME/.local/bin:$PATH"

# History configuration
HISTFILE=~/.zsh_history
HISTSIZE=10000
SAVEHIST=10000
setopt appendhistory
setopt share_history        # share history between sessions
setopt extended_history     # add timestamps to history
setopt hist_ignore_dups     # don't record duplicated commands
setopt hist_ignore_space    # don't record commands starting with space

# Basic zsh options
setopt auto_cd              # cd by typing directory name
setopt interactive_comments # Allow comments in interactive mode
setopt no_beep              # No beep on error
setopt prompt_subst         # Enable prompt substitution

# Disable VCS info if autoload fails (prevents errors in minimal environments like Alpine)
if ! command -v vcs_info >/dev/null 2>&1; then
  # Explicitly disable vcs_info to avoid errors
  function precmd_vcs_info() { return 0; }
  function vcs_info() { return 0; }
  # Make sure any functions that might call vcs_info don't error out
  RPROMPT=""
fi

# Load zap plugin manager if it exists
if [[ -f "$HOME/.local/share/zap/zap.zsh" ]]; then
  source "$HOME/.local/share/zap/zap.zsh"

  # Zap plugins - only load if zap is available
  plug "zsh-users/zsh-autosuggestions"
  plug "zsh-users/zsh-syntax-highlighting"
  plug "zap-zsh/supercharge"

  # Only load fzf plugin if fzf exists
  if command -v fzf &> /dev/null; then
    plug "zap-zsh/fzf"
  fi

  plug "hlissner/zsh-autopair"

  # Load exa plugin only if exa or eza is installed
  if command -v exa &> /dev/null || command -v eza &> /dev/null; then
    plug "zap-zsh/exa"
fi

  {{- if .git }}
  # Load fzf-tab if fzf is available
  if command -v fzf &> /dev/null; then
    plug "Aloxaf/fzf-tab"
fi
{{- end }}
fi

# FZF configuration
{{- if .fzf }}
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh
if command -v fzf &> /dev/null; then
  export FZF_DEFAULT_OPTS=" \
  --color=bg+:#1e1e2e,spinner:#f5e0dc,hl:#f38ba8 \
  --color=fg:#cdd6f4,header:#f38ba8,info:#cba6f7,pointer:#f5e0dc \
  --color=marker:#f5e0dc,fg+:#cdd6f4,prompt:#cba6f7,hl+:#f38ba8"
fi
{{- end }}

# Modern tools aliases - only set if the commands exist
{{- if .terminal_utils }}
if command -v exa &> /dev/null; then
  alias ls='exa --icons --group-directories-first'
  alias ll='exa -lh --icons --group-directories-first'
  alias la='exa -lah --icons --group-directories-first'
  alias lt='exa --tree --icons --group-directories-first'
elif command -v eza &> /dev/null; then
  alias ls='eza --icons --group-directories-first'
  alias ll='eza -lh --icons --group-directories-first'
  alias la='eza -lah --icons --group-directories-first'
  alias lt='eza --tree --icons --group-directories-first'
fi

if command -v bat &> /dev/null; then
  alias cat='bat --style=plain'
  fi
if command -v rg &> /dev/null; then
  alias grep='rg'
fi

if command -v fd &> /dev/null; then
  alias find='fd'
fi
{{- end }}

# Git aliases
{{- if .git }}
if command -v git &> /dev/null; then
  alias g='git'
  alias gs='git status'
  alias ga='git add'
  alias gc='git commit'
  alias gp='git push'
  alias gpl='git pull'
  alias gl='git log --oneline'
  alias gd='git diff'
fi
{{- end }}

# Node.js environment
{{- if .node }}
export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion
{{- end }}

# Tmux configuration
{{- if .tmux }}
if command -v tmux &> /dev/null; then
  if [ -z "$TMUX" ] && [ -n "$SSH_TTY" ] && [[ $- =~ i ]]; then
    tmux attach-session -t ssh_tmux || tmux new-session -s ssh_tmux
  fi
fi
{{- end }}

# Initialize starship prompt if installed
if command -v starship &> /dev/null; then
    eval "$(starship init zsh)"
fi

# Custom functions

# Create a new directory and enter it
function mkcd() {
  mkdir -p "$@" && cd "$@"
}

# Extract most know archives
function extract() {
  if [ -f $1 ] ; then
    case $1 in
      *.tar.bz2)   tar xjf $1     ;;
      *.tar.gz)    tar xzf $1     ;;
      *.bz2)       bunzip2 $1     ;;
      *.rar)       unrar e $1     ;;
      *.gz)        gunzip $1      ;;
      *.tar)       tar xf $1      ;;
      *.tbz2)      tar xjf $1     ;;
      *.tgz)       tar xzf $1     ;;
      *.zip)       unzip $1       ;;
      *.Z)         uncompress $1  ;;
      *.7z)        7z x $1        ;;
      *)           echo "'$1' cannot be extracted via extract()" ;;
    esac
  else
    echo "'$1' is not a valid file"
  fi
}

# Load local customizations if present
[[ -f ~/.zshrc.local ]] && source ~/.zshrc.local