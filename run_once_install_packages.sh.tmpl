#!/bin/bash

set -euo pipefail

# Detect OS
OS="$(uname -s)"

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}Installing packages for your dotfiles...${NC}"

# Function to check if a command exists
command_exists() {
  command -v "$1" >/dev/null 2>&1
}

# Install packages based on OS
case "$OS" in
  Linux)
    # Detect package manager
    if command_exists apt-get; then
      echo -e "${GREEN}Detected apt package manager${NC}"
      
      # Update package lists
      sudo apt-get update
      
      # Install packages
      sudo apt-get install -y \
        zsh \
        curl \
        git \
        vim \
        tmux \
        fzf \
        ripgrep \
        fd-find \
        bat \
        npm \
        unzip
      
      # Install exa (modern ls replacement)
      if ! command_exists exa; then
        echo -e "${YELLOW}Installing exa...${NC}"
        if command_exists cargo; then
          cargo install exa
        else
          echo -e "${YELLOW}Installing Rust to install exa...${NC}"
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
          source "$HOME/.cargo/env"
          cargo install exa
        fi
      fi
      
    elif command_exists dnf; then
      echo -e "${GREEN}Detected dnf package manager${NC}"
      
      sudo dnf check-update
      sudo dnf install -y \
        zsh \
        curl \
        git \
        vim \
        tmux \
        fzf \
        ripgrep \
        fd-find \
        bat \
        npm \
        unzip
        
    elif command_exists pacman; then
      echo -e "${GREEN}Detected pacman package manager${NC}"
      
      sudo pacman -Syu --noconfirm
      sudo pacman -S --noconfirm \
        zsh \
        curl \
        git \
        vim \
        tmux \
        fzf \
        ripgrep \
        fd \
        bat \
        exa \
        npm \
        unzip
    else
      echo -e "${RED}Unsupported package manager. Please install the required packages manually.${NC}"
      exit 1
    fi
    ;;
    
  Darwin)
    # macOS
    echo -e "${GREEN}macOS detected${NC}"
    
    # Install Homebrew if not already installed
    if ! command_exists brew; then
      echo -e "${YELLOW}Installing Homebrew...${NC}"
      /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
    fi
    
    # Make sure Homebrew is in PATH
    if [[ -f /opt/homebrew/bin/brew ]]; then
      eval "$(/opt/homebrew/bin/brew shellenv)"
    elif [[ -f /usr/local/bin/brew ]]; then
      eval "$(/usr/local/bin/brew shellenv)"
    fi
    
    # Install packages with Homebrew
    brew update
    brew install \
      zsh \
      curl \
      git \
      vim \
      tmux \
      fzf \
      ripgrep \
      fd \
      bat \
      exa \
      node \
      starship
    ;;
    
  *)
    echo -e "${RED}Unsupported operating system: $OS${NC}"
    exit 1
    ;;
esac

# Install Starship prompt
if ! command_exists starship; then
  echo -e "${YELLOW}Installing Starship prompt...${NC}"
  curl -sS https://starship.rs/install.sh | sh -s -- -y
fi

# Install or update Node Version Manager (nvm)
if [ ! -d "$HOME/.nvm" ]; then
  echo -e "${YELLOW}Installing Node Version Manager (nvm)...${NC}"
  curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.3/install.sh | bash
fi

# Install Zap for zsh if not already installed
if [ ! -d "$HOME/.local/share/zap" ]; then
  echo -e "${YELLOW}Installing Zap plugin manager for zsh...${NC}"
  zsh <(curl -s https://raw.githubusercontent.com/zap-zsh/zap/master/install.zsh) --branch release-v1
fi

# Set zsh as default shell if it's not already
if [[ "$SHELL" != *"zsh"* ]]; then
  echo -e "${YELLOW}Setting zsh as default shell...${NC}"
  chsh -s "$(which zsh)"
fi

echo -e "${GREEN}Installation completed successfully!${NC}"
echo -e "${BLUE}Please restart your terminal or run 'exec zsh' to apply the changes.${NC}"